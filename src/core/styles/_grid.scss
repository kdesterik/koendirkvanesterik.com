// Helpers mixins
//
// Helper for the grid align top

@mixin make-row-helpers($breakpoint) {
  .row--#{$breakpoint}-top {
    align-items: flex-start;
  }
  .row--#{$breakpoint}-center {
    align-items: center;
  }
  .row--#{$breakpoint}-bottom {
    align-items: flex-end;
  }
}

// Helper for the sorting the first item
@mixin make-col-helpers($breakpoint) {
  .col--#{$breakpoint}-align-top {
    align-self: flex-start;
  }
  .col--#{$breakpoint}-align-center {
    align-self: center;
  }
  .col--#{$breakpoint}-align-bottom {
    align-self: flex-end;
  }

  .col--#{$breakpoint}-first {
    order: -1;
  }
  .col--#{$breakpoint}-last {
    order: 1;
  }
  .col--#{$breakpoint}-reset {
    order: 0;
  }
  .row--#{$breakpoint}-reverse {
    flex-direction: row-reverse;
  }
  .col--#{$breakpoint}-flex {
    display: flex;
  }
}

@mixin make-text-helpers($breakpoint) {
  .text--#{$breakpoint}-right {
    text-align: right;
  }
  .text--#{$breakpoint}-left {
    text-align: left;
  }
  .text--#{$breakpoint}-center {
    text-align: center;
  }
}

@mixin make-helpers($breakpoint) {
  @include make-row-helpers($breakpoint);
  @include make-col-helpers($breakpoint);
  @include make-text-helpers($breakpoint);
}


// Grid framework mixins
//
// All mixin functions to generate grid framework

@mixin make-default() {
  & {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
    padding: $gutter ($gutter/2) 0;
  }
}

@mixin make-offset($columns) {
  @for $number from 1 through $columns {
    &-offset-#{$number} {
      margin-left: (100 / $columns * $number)#{'%'};
    }
  }
}

@mixin make-column($columns ) {
  @for $number from 1 through $columns {
    &-#{$number} {
      width: (100 / $columns * $number)#{'%'};
      flex: none;
    }
  }
}

@mixin make-grid-column($breakpoint, $columns) {
  @include make-helpers($breakpoint);
  .col--#{$breakpoint} {
    @include make-default();
    @include make-column($columns);
    @include make-offset($columns)
  }
}

@mixin init($breakpoints, $columns) {
  @each $breakpoint, $width in $breakpoints {
    @if ($width == 0) {
      @include make-grid-column($breakpoint, $columns);
    } @else {
      @media (min-width: $width) {
        @include make-grid-column($breakpoint, $columns);
      }
    }
  }
}


// BEM mixins
//
// All mixin functions to apply the Block Element Modifier principle to grid framework

@mixin has($element) {
  &__#{$element} {
    @content;
  }
}

@mixin variant($modifier) {
  &--#{$modifier} {
    @content;
  }
}


// Grid
//
// Grid class

.grid {
  box-sizing: border-box;
  padding: 0 ($gutter/2);

  @include variant(container) {
    margin: 0 auto;

    @each $breakpoint, $width in $breakpoints {
      @if ($width == 0) {
        width: 100%;
      } @else {
        @media (min-width: $width) {
          width: $width;
        }
      }
    }
  }

  @include variant(no-gutters) {
    padding: 0;
  }
}


// Row
//
// Row class

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 100%;
  flex-direction: row;
  flex-wrap: wrap;
  list-style: none;
  margin: -$gutter (-$gutter/2) $gutter;
  padding: 0;

  &:last-child {
    margin-bottom: 0;
  }

  @include variant(no-gutters) {
    margin: 0;
  }
}


// Col
//
// Column class

.col {
  box-sizing: border-box;
  flex: 0 0 100%;
  max-width: 100%;
  padding: $gutter ($gutter/2) 0;

  @include variant(no-gutters) {
    padding: 0;
  }
}


// Text
//
// text class

.text {
  @include variant(left) {
    text-align: left;
  }

  @include variant(center) {
    text-align: center;
  }

  @include variant(right) {
    text-align: right;
  }
}


// Constructor
@include init( $breakpoints, $columns );